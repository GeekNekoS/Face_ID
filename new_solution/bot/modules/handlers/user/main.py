import asyncio
import os
import shutil
import cv2

from typing import List
from aiogram.types import Message
from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from EYWA import extract_faces, compare_faces, get_faces_vector
from modules.misc.states import UserInputState
from aiogram.types import Message
from modules.misc.throttling import rate_limit
from modules.keyboards import *
from modules.misc.settings import hamster_stickers
from random import choice


async def send_hello_message(message: Message) -> None:
    await message.answer(f'ü¶â<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å,</b> {message.from_user.first_name}! \
\n–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞ –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –æ—Ç—Å—é–¥–∞ ‚Äî https://t.me/tests_photo', reply_markup=main_menu)
    
@rate_limit(2)
async def start_handler(message: Message) -> None:
    await message.answer_sticker(rf"{choice(hamster_stickers)}")
    await send_hello_message(message)


@rate_limit(2)
async def answer_user(message: Message):
    match message.text:
        case '‚úÇÔ∏è–û–±—Ä–µ–∑–∞—Ç—å –ª–∏—Ü–æ':
            await message.answer('üñº–ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–µ–∑–∫–∏', reply_markup=cancel_menu)
            await UserInputState.crop_image.set()
        case '‚öñÔ∏è–°—Ä–∞–≤–Ω–∏—Ç—å –ª–∏—Ü–∞':
            await message.answer('üë•–ü—Ä–∏—à–ª–∏—Ç–µ –¥–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∏—Ü–∞', reply_markup=cancel_menu)
            await UserInputState.compare_face.set()
        case _:
            await message.answer(f'ü§ñ–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', reply_markup=main_menu)
            
            
@rate_limit(0)
async def state_crop_image(message: Message, state: FSMContext, album: List[Message]=None) -> None: 
    if message.text == '‚Ü™Ô∏è–ù–∞–∑–∞–¥':
        await message.answer(f'ü§ñ–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', reply_markup=main_menu)
        return await state.finish()
    
    match message.content_type:
        case 'photo' | 'document':
            await message.answer('‚úÖ–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ...')
            if album is None: album = [ message ]
            for index, obj in enumerate(album):
                await asyncio.sleep(0.5)
                if obj.photo:
                    file_id = obj.photo[-1]
                else:
                    file_id = obj[obj.content_type]
                await file_id.download(destination_file=f'{message.from_user.id}/{message.from_user.id}_{index}.jpg')
        case _:
            await message.answer('‚ö†Ô∏è–î–ª—è –æ–±—Ä–µ–∑–∫–∏ –ª–∏—Ü–∞ –Ω–µ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!')
            return await UserInputState.crop_image.set()
            
    for image in os.listdir(f'{message.from_user.id}'):
        await asyncio.to_thread(extract_faces, f'{message.from_user.id}/'+image, 10, 512, f'{message.from_user.id}_results')
        
    if not os.path.exists(f'{message.from_user.id}_results'):
        await message.answer('‚ö†Ô∏è–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ª–∏—Ü–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!')
        return await UserInputState.crop_image.set()
   
    for image in os.listdir(f'{message.from_user.id}_results'):
        photo = open(f'{message.from_user.id}_results/{image}', 'rb')
        await message.answer_document(photo)

    await asyncio.to_thread(shutil.rmtree, f'{message.from_user.id}_results')
    await asyncio.to_thread(shutil.rmtree, f'{message.from_user.id}')
    await message.answer(f'‚úÖ–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!', reply_markup=main_menu)
    await state.finish()
    

@rate_limit(0)
async def state_compare_image(message: Message, state: FSMContext, album: List[Message]=None) -> None: 
    if message.text == '‚Ü™Ô∏è–ù–∞–∑–∞–¥':
        await message.answer(f'ü§ñ–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!', reply_markup=main_menu)
        return await state.finish()
    
    match message.content_type:
        case 'photo' | 'document':
            await message.answer('‚úÖ–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ...')
            if album is None: album = [ message ]
            for index, obj in enumerate(album):
                await asyncio.sleep(0.5)
                if obj.photo:
                    file_id = obj.photo[-1]
                else:
                    file_id = obj[obj.content_type]
                await file_id.download(destination_file=f'{message.from_user.id}/{message.from_user.id}_{index}.jpg')
        case _:
            await message.answer('‚ö†Ô∏è–î–ª—è –æ–±—Ä–µ–∑–∫–∏ –ª–∏—Ü–∞ –Ω–µ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!')
            return await UserInputState.crop_image.set()

    faces = [cv2.imread(f'{message.from_user.id}/'+image) for image in os.listdir(f'{message.from_user.id}')]
    faces = await asyncio.to_thread(get_faces_vector, faces)
    result = await asyncio.to_thread(compare_faces, faces)
    await asyncio.to_thread(shutil.rmtree, f'{message.from_user.id}')
    await message.answer(f'–†–µ–∑—É–ª—å—Ç–∞—Ç: <code>{round(result*100, 2)}%</code>', reply_markup=main_menu)
    await state.finish()
    
    
def register_user(dp: Dispatcher) -> None:
    dp.register_message_handler(start_handler, commands=['start'])
    
    dp.register_message_handler(
        state_crop_image,
        content_types=['photo', 'document', 'text'], 
        state=UserInputState.crop_image)
    
    dp.register_message_handler(
        state_compare_image,
        content_types=['photo', 'document', 'text'], 
        state=UserInputState.compare_face)

    dp.register_message_handler(answer_user, content_types=['text'])
    
    
    